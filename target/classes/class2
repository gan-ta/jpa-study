데이터베이스 스키마 자동 생성하기
운영 시스템에서는 절대 사용하면 안됨

create : 기존테이블 삭제 후 다시 생성(drop + create)(운영 db에서 사용하면 안됨)
create-drop : create와 같으나 종료 시점에서 테이블 drop(운영 db에서 사용하면 안됨)
update : 변경부분만 반영(운영 db에서 사용하면 안됨)
validate : 엔티티와 테이블이 정상 매핑되었는지 확인
none : 사용하지 않음

개발초기 - create, update
테스트 서버 - update,validate
스테이징과 운영 서버는 validate, none

요즘은 개발 서버에서도 사용하지 않는 추세

매핑 어노테이션
@Column(name = "...") 컬림 이름 다를 때
@Temporal(TemporalType.TIMESTAMP) 시간 관련
@Enumerated(EnumType.STRING)
@Lob : 컨텐츠 길이가 너무 길 때
CLOB(캐릭터 타입), BLOB(바이너리 타입)
@Transient(테이블에 매핑되지 않는 필드)

Enum을 사용할 때에는 주의! : String으로!(현업에서)
이유: enum수정시 order같은 경우는 변화가 일어나서 망가짐

@Column
name: 매핑항 테이블 컬럼 이름
insertable(디비에 안들어감), updateable : 읽기 전용
nullable : null 혀용여부 결정, DDL 생성시 사용
unique : 유니크한 제약 조건, DDL 생성시 사용
columnDefinition, length, precision, scale(DDL)
length : 길이 조건


식별자 매핑 방법
@id
identity :db위임
sequence : 데이터베이스 시퀀스 오브젝트 사용, oracle
    @SequenceGenerator 필요
table:키 생성용 테이블 사용, 모든 DB에서 사용
    @TableGenerator 필요
auto:  방언에 따라 자동 지정, 기본값

권장하는 식별자 전략
1,기본키 제약 조건 : null아님, 유일, 변하면 안된다
2,미래까지 이 조건을 만족하는 자연키는 찾기 어렵다. 대리키(대체키)를 사용하자
3,주민등록번호도 바꾸는 경우가 있기 떄문에 기본키로 적절하지 않음
(실제 현업에서는 예상치 못한 pk가 변하는 경우도 있다.)
4,권장:Long + 대체키 + 키 생성전략 사용(시퀀스, auto increment, 키생성 테이블을 쓰던 비지니스와 관련없는것을 써라)
(유효 id도 가능하지만 성능 고려하여 쓰자)
(int는 제한이 작기 때문에 쓰지 말자)

